# -*- coding: utf-8 -*-

from courseware.courses import get_course_with_access, has_access, get_studio_url
from courseware.models import StudentModule
from openedx.core.djangoapps.course_groups.cohorts import get_cohort, get_cohort_id
from django.db.models import Q
from django.http import Http404, HttpResponse, JsonResponse
from django.shortcuts import render_to_response
from django.views.decorators.csrf import csrf_exempt
from opaque_keys.edx.keys import CourseKey
from rest_framework.generics import GenericAPIView
from slam.models import Wristband, Script
from .tasks import update_survey_data
from student.models import CourseEnrollment

import json

# These are the fields to be stored in the database
LOGFIELDS = [
    'wristband_id',
    'signal',
    'timestamp',
    'value',
]


# This is the decorator to exempt cross-site request forgery.
@csrf_exempt
def sensor_data(request):
    if request.method == 'POST':
        rcvd_json_data = json.loads(request.body)
        # print rcvd_json_data
        field_values = {x: rcvd_json_data.get(x, '') for x in LOGFIELDS}
        # print field_values
        tldat = Wristband(**field_values)
        try:
            tldat.save()
        except Exception as e:  # pylint: disable=broad-except
            print '%s (%s)' % (e.message, type(e))
            return JsonResponse({'mesg': 'Values not saved'})
        return JsonResponse({'mesg': 'Success'})
    else:  # Other requests
        return HttpResponse("You're at empatica sensor data API. Invalid request.")


class SlamDashboardView(GenericAPIView):
    """
    View methods related to the teams dashboard.
    """

    def get(self, request, course_id):
        update_survey_data().apply_async(countdown=60)

        user = request.user
        course_key = CourseKey.from_string(course_id)
        # Course descriptor
        course = get_course_with_access(user, "load", course_key, depth=None, check_if_enrolled=False)
        studio_url = get_studio_url(course, 'settings/grading')

        if not CourseEnrollment.is_enrolled(user, course.id) and \
                not has_access(user, 'staff', course, course.id):
            raise Http404

        # CourseUserGroup object
        user_cohort = get_cohort(user, course_key)
        cohort_usernames = [user_in.username for user_in in user_cohort.users.all()] if user_cohort else None

        # Finnish version v1.1
        gauge_data = [
          ['Label', 'Value'],
          ['Ryhmä', 0],
          ['Tieto', 0],
          ['Tahto', 0],
          ['Tunne', 0]
        ]

        survey_data = script_results_to_visualize(course_key, user_cohort)
        if survey_data:
            if len(survey_data) >= 1:
                column_headers = ['Script', 'Ryhmä', 'Tieto', 'Tahto', 'Tunne']
                survey_data.insert(0, column_headers)
                # survey_json = json.dumps(survey_data)
                number_of_questions = 4
                # gauge data
                for question_i in range(1, number_of_questions + 1):
                    for i in reversed(range(0, len(survey_data))):
                        if survey_data[i][question_i]:
                            gauge_data[question_i][1] = survey_data[i][question_i]
                            break

        context = {
            "course": course,
            "cohort_usernames": cohort_usernames,
            "staff_access": has_access(user, 'staff', course_key),
            "studio_url": studio_url,
            "survey_json": [json.dumps(x) for x in to_separate_charts(survey_data)],
            "gauge_json": json.dumps(gauge_data),
            "block_id": cohort_usernames,
        }

        return render_to_response("slam/slam.html", context)


def script_results_to_visualize(course_key, user_cohort):

    try:
        script_results = eval(Script.objects.get(Q(course_key=course_key) & Q(cohort=user_cohort)).results)
    except (NameError, Script.DoesNotExist):
        script_results = None

    return script_results


def to_separate_charts(data_table):

    # Transforms data in ArrayToDataTable format for Google Charts containing N curves in a single chart
    # to an ArrayToDataTable for N charts with a single curve
    single_line_charts = []
    if data_table:
        for i in range(0, len(data_table[0])-1):
            # each question
            single_line_charts.append([])
            # aux_data_table = data_table
            for j in range(0, len(data_table)):
                # each survey
                single_line_charts[i].append([data_table[j][0], data_table[j][i+1]])
    else:
        # TODO putting this manually here is not generalizable
        # The number of empty list should be made dynamically equal to the number of questions in a survey
        single_line_charts = [[], [], [], [], ]

    return single_line_charts

